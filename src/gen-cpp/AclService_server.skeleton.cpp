// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "AclService.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

using namespace  ;

class AclServiceHandler : virtual public AclServiceIf {
 public:
  AclServiceHandler() {
    // Your initialization goes here
  }

  void validateUser(AuthStatus& _return, const User& user, const std::string& password) {
    // Your implementation goes here
    printf("validateUser\n");
  }

  void open(const User& user, const std::string& password) {
    // Your implementation goes here
    printf("open\n");
  }

  void close() {
    // Your implementation goes here
    printf("close\n");
  }

  void addUser(AuthStatus& _return, const UserInfo& userinfo, const AuditInfo& info) {
    // Your implementation goes here
    printf("addUser\n");
  }

  void removeUser(AuthStatus& _return, const User& user, const AuditInfo& info) {
    // Your implementation goes here
    printf("removeUser\n");
  }

  void addRole(AuthStatus& _return, const RoleInfo& roleInfo, const AuditInfo& info) {
    // Your implementation goes here
    printf("addRole\n");
  }

  void removeRole(AuthStatus& _return, const Role& role, const AuditInfo& info) {
    // Your implementation goes here
    printf("removeRole\n");
  }

  void grantRoleToUser(AuthStatus& _return, const User& user, const Role& role, const int64_t expireTime, const AuditInfo& info) {
    // Your implementation goes here
    printf("grantRoleToUser\n");
  }

  void grantPrivilegeToRole(AuthStatus& _return, const Role& role, const std::vector<Privilege> & privilege, const int64_t expireTime, const AuditInfo& info) {
    // Your implementation goes here
    printf("grantPrivilegeToRole\n");
  }

  void revokeRole(AuthStatus& _return, const User& user, const Role& role, const AuditInfo& info) {
    // Your implementation goes here
    printf("revokeRole\n");
  }

  void revokePrivilege(AuthStatus& _return, const Role& role, const std::vector<Privilege> & privilege, const AuditInfo& info) {
    // Your implementation goes here
    printf("revokePrivilege\n");
  }

  void authenticateUser(AuthStatus& _return, const User& user, const std::vector<Privilege> & privilege) {
    // Your implementation goes here
    printf("authenticateUser\n");
  }

  void authenticateRole(AuthStatus& _return, const Role& role, const std::vector<Privilege> & privilege) {
    // Your implementation goes here
    printf("authenticateRole\n");
  }

  void expireUserPrivilege(AuthStatus& _return, const User& user) {
    // Your implementation goes here
    printf("expireUserPrivilege\n");
  }

  void expireRolePrivilege(AuthStatus& _return, const Role& role) {
    // Your implementation goes here
    printf("expireRolePrivilege\n");
  }

  void getRoleInfo(RoleInfo& _return, const Role& role) {
    // Your implementation goes here
    printf("getRoleInfo\n");
  }

  void getUserInfo(UserInfo& _return, const User& user) {
    // Your implementation goes here
    printf("getUserInfo\n");
  }

  void getRolesByUser(std::vector<Role> & _return, const User& user) {
    // Your implementation goes here
    printf("getRolesByUser\n");
  }

  void getPrivilegesByRole(std::vector<Privilege> & _return, const Role& role) {
    // Your implementation goes here
    printf("getPrivilegesByRole\n");
  }

  void getUsersHasRole(std::vector<UserInfo> & _return, const Role& role) {
    // Your implementation goes here
    printf("getUsersHasRole\n");
  }

  void getRolesHasPrivilege(std::vector<RoleInfo> & _return, const Privilege& privilege) {
    // Your implementation goes here
    printf("getRolesHasPrivilege\n");
  }

  void addAuditInfo(const AuditInfo& info) {
    // Your implementation goes here
    printf("addAuditInfo\n");
  }

  void getAuditInfo(std::vector<AuditInfo> & _return, const AuditCriteria& query) {
    // Your implementation goes here
    printf("getAuditInfo\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  shared_ptr<AclServiceHandler> handler(new AclServiceHandler());
  shared_ptr<TProcessor> processor(new AclServiceProcessor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

