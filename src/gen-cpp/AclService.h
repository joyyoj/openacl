/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef AclService_H
#define AclService_H

#include <thrift/TDispatchProcessor.h>
#include "OpenAcl_types.h"



class AclServiceIf {
 public:
  virtual ~AclServiceIf() {}
  virtual void validateUser(AuthStatus& _return, const User& user, const std::string& password) = 0;
  virtual void open(const User& user, const std::string& password) = 0;
  virtual void close() = 0;
  virtual void addUser(AuthStatus& _return, const UserInfo& userinfo, const AuditInfo& info) = 0;
  virtual void removeUser(AuthStatus& _return, const User& user, const AuditInfo& info) = 0;
  virtual void addRole(AuthStatus& _return, const RoleInfo& roleInfo, const AuditInfo& info) = 0;
  virtual void removeRole(AuthStatus& _return, const Role& role, const AuditInfo& info) = 0;
  virtual void grantRoleToUser(AuthStatus& _return, const User& user, const Role& role, const int64_t expireTime, const AuditInfo& info) = 0;
  virtual void grantPrivilegeToRole(AuthStatus& _return, const Role& role, const std::vector<Privilege> & privilege, const int64_t expireTime, const AuditInfo& info) = 0;
  virtual void revokeRole(AuthStatus& _return, const User& user, const Role& role, const AuditInfo& info) = 0;
  virtual void revokePrivilege(AuthStatus& _return, const Role& role, const std::vector<Privilege> & privilege, const AuditInfo& info) = 0;
  virtual void authenticateUser(AuthStatus& _return, const User& user, const std::vector<Privilege> & privilege) = 0;
  virtual void authenticateRole(AuthStatus& _return, const Role& role, const std::vector<Privilege> & privilege) = 0;
  virtual void expireUserPrivilege(AuthStatus& _return, const User& user) = 0;
  virtual void expireRolePrivilege(AuthStatus& _return, const Role& role) = 0;
  virtual void getRoleInfo(RoleInfo& _return, const Role& role) = 0;
  virtual void getUserInfo(UserInfo& _return, const User& user) = 0;
  virtual void getRolesByUser(std::vector<Role> & _return, const User& user) = 0;
  virtual void getPrivilegesByRole(std::vector<Privilege> & _return, const Role& role) = 0;
  virtual void getUsersHasRole(std::vector<UserInfo> & _return, const Role& role) = 0;
  virtual void getRolesHasPrivilege(std::vector<RoleInfo> & _return, const Privilege& privilege) = 0;
  virtual void addAuditInfo(const AuditInfo& info) = 0;
  virtual void getAuditInfo(std::vector<AuditInfo> & _return, const AuditCriteria& query) = 0;
};

class AclServiceIfFactory {
 public:
  typedef AclServiceIf Handler;

  virtual ~AclServiceIfFactory() {}

  virtual AclServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(AclServiceIf* /* handler */) = 0;
};

class AclServiceIfSingletonFactory : virtual public AclServiceIfFactory {
 public:
  AclServiceIfSingletonFactory(const boost::shared_ptr<AclServiceIf>& iface) : iface_(iface) {}
  virtual ~AclServiceIfSingletonFactory() {}

  virtual AclServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(AclServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<AclServiceIf> iface_;
};

class AclServiceNull : virtual public AclServiceIf {
 public:
  virtual ~AclServiceNull() {}
  void validateUser(AuthStatus& /* _return */, const User& /* user */, const std::string& /* password */) {
    return;
  }
  void open(const User& /* user */, const std::string& /* password */) {
    return;
  }
  void close() {
    return;
  }
  void addUser(AuthStatus& /* _return */, const UserInfo& /* userinfo */, const AuditInfo& /* info */) {
    return;
  }
  void removeUser(AuthStatus& /* _return */, const User& /* user */, const AuditInfo& /* info */) {
    return;
  }
  void addRole(AuthStatus& /* _return */, const RoleInfo& /* roleInfo */, const AuditInfo& /* info */) {
    return;
  }
  void removeRole(AuthStatus& /* _return */, const Role& /* role */, const AuditInfo& /* info */) {
    return;
  }
  void grantRoleToUser(AuthStatus& /* _return */, const User& /* user */, const Role& /* role */, const int64_t /* expireTime */, const AuditInfo& /* info */) {
    return;
  }
  void grantPrivilegeToRole(AuthStatus& /* _return */, const Role& /* role */, const std::vector<Privilege> & /* privilege */, const int64_t /* expireTime */, const AuditInfo& /* info */) {
    return;
  }
  void revokeRole(AuthStatus& /* _return */, const User& /* user */, const Role& /* role */, const AuditInfo& /* info */) {
    return;
  }
  void revokePrivilege(AuthStatus& /* _return */, const Role& /* role */, const std::vector<Privilege> & /* privilege */, const AuditInfo& /* info */) {
    return;
  }
  void authenticateUser(AuthStatus& /* _return */, const User& /* user */, const std::vector<Privilege> & /* privilege */) {
    return;
  }
  void authenticateRole(AuthStatus& /* _return */, const Role& /* role */, const std::vector<Privilege> & /* privilege */) {
    return;
  }
  void expireUserPrivilege(AuthStatus& /* _return */, const User& /* user */) {
    return;
  }
  void expireRolePrivilege(AuthStatus& /* _return */, const Role& /* role */) {
    return;
  }
  void getRoleInfo(RoleInfo& /* _return */, const Role& /* role */) {
    return;
  }
  void getUserInfo(UserInfo& /* _return */, const User& /* user */) {
    return;
  }
  void getRolesByUser(std::vector<Role> & /* _return */, const User& /* user */) {
    return;
  }
  void getPrivilegesByRole(std::vector<Privilege> & /* _return */, const Role& /* role */) {
    return;
  }
  void getUsersHasRole(std::vector<UserInfo> & /* _return */, const Role& /* role */) {
    return;
  }
  void getRolesHasPrivilege(std::vector<RoleInfo> & /* _return */, const Privilege& /* privilege */) {
    return;
  }
  void addAuditInfo(const AuditInfo& /* info */) {
    return;
  }
  void getAuditInfo(std::vector<AuditInfo> & /* _return */, const AuditCriteria& /* query */) {
    return;
  }
};

typedef struct _AclService_validateUser_args__isset {
  _AclService_validateUser_args__isset() : user(false), password(false) {}
  bool user;
  bool password;
} _AclService_validateUser_args__isset;

class AclService_validateUser_args {
 public:

  AclService_validateUser_args() : password() {
  }

  virtual ~AclService_validateUser_args() throw() {}

  User user;
  std::string password;

  _AclService_validateUser_args__isset __isset;

  void __set_user(const User& val) {
    user = val;
  }

  void __set_password(const std::string& val) {
    password = val;
  }

  bool operator == (const AclService_validateUser_args & rhs) const
  {
    if (!(user == rhs.user))
      return false;
    if (!(password == rhs.password))
      return false;
    return true;
  }
  bool operator != (const AclService_validateUser_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AclService_validateUser_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AclService_validateUser_pargs {
 public:


  virtual ~AclService_validateUser_pargs() throw() {}

  const User* user;
  const std::string* password;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AclService_validateUser_result__isset {
  _AclService_validateUser_result__isset() : success(false) {}
  bool success;
} _AclService_validateUser_result__isset;

class AclService_validateUser_result {
 public:

  AclService_validateUser_result() {
  }

  virtual ~AclService_validateUser_result() throw() {}

  AuthStatus success;

  _AclService_validateUser_result__isset __isset;

  void __set_success(const AuthStatus& val) {
    success = val;
  }

  bool operator == (const AclService_validateUser_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const AclService_validateUser_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AclService_validateUser_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AclService_validateUser_presult__isset {
  _AclService_validateUser_presult__isset() : success(false) {}
  bool success;
} _AclService_validateUser_presult__isset;

class AclService_validateUser_presult {
 public:


  virtual ~AclService_validateUser_presult() throw() {}

  AuthStatus* success;

  _AclService_validateUser_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AclService_open_args__isset {
  _AclService_open_args__isset() : user(false), password(false) {}
  bool user;
  bool password;
} _AclService_open_args__isset;

class AclService_open_args {
 public:

  AclService_open_args() : password() {
  }

  virtual ~AclService_open_args() throw() {}

  User user;
  std::string password;

  _AclService_open_args__isset __isset;

  void __set_user(const User& val) {
    user = val;
  }

  void __set_password(const std::string& val) {
    password = val;
  }

  bool operator == (const AclService_open_args & rhs) const
  {
    if (!(user == rhs.user))
      return false;
    if (!(password == rhs.password))
      return false;
    return true;
  }
  bool operator != (const AclService_open_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AclService_open_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AclService_open_pargs {
 public:


  virtual ~AclService_open_pargs() throw() {}

  const User* user;
  const std::string* password;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AclService_open_result {
 public:

  AclService_open_result() {
  }

  virtual ~AclService_open_result() throw() {}


  bool operator == (const AclService_open_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const AclService_open_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AclService_open_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AclService_open_presult {
 public:


  virtual ~AclService_open_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class AclService_close_args {
 public:

  AclService_close_args() {
  }

  virtual ~AclService_close_args() throw() {}


  bool operator == (const AclService_close_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const AclService_close_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AclService_close_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AclService_close_pargs {
 public:


  virtual ~AclService_close_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AclService_close_result {
 public:

  AclService_close_result() {
  }

  virtual ~AclService_close_result() throw() {}


  bool operator == (const AclService_close_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const AclService_close_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AclService_close_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AclService_close_presult {
 public:


  virtual ~AclService_close_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AclService_addUser_args__isset {
  _AclService_addUser_args__isset() : userinfo(false), info(false) {}
  bool userinfo;
  bool info;
} _AclService_addUser_args__isset;

class AclService_addUser_args {
 public:

  AclService_addUser_args() {
  }

  virtual ~AclService_addUser_args() throw() {}

  UserInfo userinfo;
  AuditInfo info;

  _AclService_addUser_args__isset __isset;

  void __set_userinfo(const UserInfo& val) {
    userinfo = val;
  }

  void __set_info(const AuditInfo& val) {
    info = val;
  }

  bool operator == (const AclService_addUser_args & rhs) const
  {
    if (!(userinfo == rhs.userinfo))
      return false;
    if (!(info == rhs.info))
      return false;
    return true;
  }
  bool operator != (const AclService_addUser_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AclService_addUser_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AclService_addUser_pargs {
 public:


  virtual ~AclService_addUser_pargs() throw() {}

  const UserInfo* userinfo;
  const AuditInfo* info;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AclService_addUser_result__isset {
  _AclService_addUser_result__isset() : success(false) {}
  bool success;
} _AclService_addUser_result__isset;

class AclService_addUser_result {
 public:

  AclService_addUser_result() {
  }

  virtual ~AclService_addUser_result() throw() {}

  AuthStatus success;

  _AclService_addUser_result__isset __isset;

  void __set_success(const AuthStatus& val) {
    success = val;
  }

  bool operator == (const AclService_addUser_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const AclService_addUser_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AclService_addUser_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AclService_addUser_presult__isset {
  _AclService_addUser_presult__isset() : success(false) {}
  bool success;
} _AclService_addUser_presult__isset;

class AclService_addUser_presult {
 public:


  virtual ~AclService_addUser_presult() throw() {}

  AuthStatus* success;

  _AclService_addUser_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AclService_removeUser_args__isset {
  _AclService_removeUser_args__isset() : user(false), info(false) {}
  bool user;
  bool info;
} _AclService_removeUser_args__isset;

class AclService_removeUser_args {
 public:

  AclService_removeUser_args() {
  }

  virtual ~AclService_removeUser_args() throw() {}

  User user;
  AuditInfo info;

  _AclService_removeUser_args__isset __isset;

  void __set_user(const User& val) {
    user = val;
  }

  void __set_info(const AuditInfo& val) {
    info = val;
  }

  bool operator == (const AclService_removeUser_args & rhs) const
  {
    if (!(user == rhs.user))
      return false;
    if (!(info == rhs.info))
      return false;
    return true;
  }
  bool operator != (const AclService_removeUser_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AclService_removeUser_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AclService_removeUser_pargs {
 public:


  virtual ~AclService_removeUser_pargs() throw() {}

  const User* user;
  const AuditInfo* info;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AclService_removeUser_result__isset {
  _AclService_removeUser_result__isset() : success(false) {}
  bool success;
} _AclService_removeUser_result__isset;

class AclService_removeUser_result {
 public:

  AclService_removeUser_result() {
  }

  virtual ~AclService_removeUser_result() throw() {}

  AuthStatus success;

  _AclService_removeUser_result__isset __isset;

  void __set_success(const AuthStatus& val) {
    success = val;
  }

  bool operator == (const AclService_removeUser_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const AclService_removeUser_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AclService_removeUser_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AclService_removeUser_presult__isset {
  _AclService_removeUser_presult__isset() : success(false) {}
  bool success;
} _AclService_removeUser_presult__isset;

class AclService_removeUser_presult {
 public:


  virtual ~AclService_removeUser_presult() throw() {}

  AuthStatus* success;

  _AclService_removeUser_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AclService_addRole_args__isset {
  _AclService_addRole_args__isset() : roleInfo(false), info(false) {}
  bool roleInfo;
  bool info;
} _AclService_addRole_args__isset;

class AclService_addRole_args {
 public:

  AclService_addRole_args() {
  }

  virtual ~AclService_addRole_args() throw() {}

  RoleInfo roleInfo;
  AuditInfo info;

  _AclService_addRole_args__isset __isset;

  void __set_roleInfo(const RoleInfo& val) {
    roleInfo = val;
  }

  void __set_info(const AuditInfo& val) {
    info = val;
  }

  bool operator == (const AclService_addRole_args & rhs) const
  {
    if (!(roleInfo == rhs.roleInfo))
      return false;
    if (!(info == rhs.info))
      return false;
    return true;
  }
  bool operator != (const AclService_addRole_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AclService_addRole_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AclService_addRole_pargs {
 public:


  virtual ~AclService_addRole_pargs() throw() {}

  const RoleInfo* roleInfo;
  const AuditInfo* info;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AclService_addRole_result__isset {
  _AclService_addRole_result__isset() : success(false) {}
  bool success;
} _AclService_addRole_result__isset;

class AclService_addRole_result {
 public:

  AclService_addRole_result() {
  }

  virtual ~AclService_addRole_result() throw() {}

  AuthStatus success;

  _AclService_addRole_result__isset __isset;

  void __set_success(const AuthStatus& val) {
    success = val;
  }

  bool operator == (const AclService_addRole_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const AclService_addRole_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AclService_addRole_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AclService_addRole_presult__isset {
  _AclService_addRole_presult__isset() : success(false) {}
  bool success;
} _AclService_addRole_presult__isset;

class AclService_addRole_presult {
 public:


  virtual ~AclService_addRole_presult() throw() {}

  AuthStatus* success;

  _AclService_addRole_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AclService_removeRole_args__isset {
  _AclService_removeRole_args__isset() : role(false), info(false) {}
  bool role;
  bool info;
} _AclService_removeRole_args__isset;

class AclService_removeRole_args {
 public:

  AclService_removeRole_args() {
  }

  virtual ~AclService_removeRole_args() throw() {}

  Role role;
  AuditInfo info;

  _AclService_removeRole_args__isset __isset;

  void __set_role(const Role& val) {
    role = val;
  }

  void __set_info(const AuditInfo& val) {
    info = val;
  }

  bool operator == (const AclService_removeRole_args & rhs) const
  {
    if (!(role == rhs.role))
      return false;
    if (!(info == rhs.info))
      return false;
    return true;
  }
  bool operator != (const AclService_removeRole_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AclService_removeRole_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AclService_removeRole_pargs {
 public:


  virtual ~AclService_removeRole_pargs() throw() {}

  const Role* role;
  const AuditInfo* info;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AclService_removeRole_result__isset {
  _AclService_removeRole_result__isset() : success(false) {}
  bool success;
} _AclService_removeRole_result__isset;

class AclService_removeRole_result {
 public:

  AclService_removeRole_result() {
  }

  virtual ~AclService_removeRole_result() throw() {}

  AuthStatus success;

  _AclService_removeRole_result__isset __isset;

  void __set_success(const AuthStatus& val) {
    success = val;
  }

  bool operator == (const AclService_removeRole_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const AclService_removeRole_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AclService_removeRole_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AclService_removeRole_presult__isset {
  _AclService_removeRole_presult__isset() : success(false) {}
  bool success;
} _AclService_removeRole_presult__isset;

class AclService_removeRole_presult {
 public:


  virtual ~AclService_removeRole_presult() throw() {}

  AuthStatus* success;

  _AclService_removeRole_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AclService_grantRoleToUser_args__isset {
  _AclService_grantRoleToUser_args__isset() : user(false), role(false), expireTime(false), info(false) {}
  bool user;
  bool role;
  bool expireTime;
  bool info;
} _AclService_grantRoleToUser_args__isset;

class AclService_grantRoleToUser_args {
 public:

  AclService_grantRoleToUser_args() : expireTime(0) {
  }

  virtual ~AclService_grantRoleToUser_args() throw() {}

  User user;
  Role role;
  int64_t expireTime;
  AuditInfo info;

  _AclService_grantRoleToUser_args__isset __isset;

  void __set_user(const User& val) {
    user = val;
  }

  void __set_role(const Role& val) {
    role = val;
  }

  void __set_expireTime(const int64_t val) {
    expireTime = val;
  }

  void __set_info(const AuditInfo& val) {
    info = val;
  }

  bool operator == (const AclService_grantRoleToUser_args & rhs) const
  {
    if (!(user == rhs.user))
      return false;
    if (!(role == rhs.role))
      return false;
    if (!(expireTime == rhs.expireTime))
      return false;
    if (!(info == rhs.info))
      return false;
    return true;
  }
  bool operator != (const AclService_grantRoleToUser_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AclService_grantRoleToUser_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AclService_grantRoleToUser_pargs {
 public:


  virtual ~AclService_grantRoleToUser_pargs() throw() {}

  const User* user;
  const Role* role;
  const int64_t* expireTime;
  const AuditInfo* info;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AclService_grantRoleToUser_result__isset {
  _AclService_grantRoleToUser_result__isset() : success(false) {}
  bool success;
} _AclService_grantRoleToUser_result__isset;

class AclService_grantRoleToUser_result {
 public:

  AclService_grantRoleToUser_result() {
  }

  virtual ~AclService_grantRoleToUser_result() throw() {}

  AuthStatus success;

  _AclService_grantRoleToUser_result__isset __isset;

  void __set_success(const AuthStatus& val) {
    success = val;
  }

  bool operator == (const AclService_grantRoleToUser_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const AclService_grantRoleToUser_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AclService_grantRoleToUser_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AclService_grantRoleToUser_presult__isset {
  _AclService_grantRoleToUser_presult__isset() : success(false) {}
  bool success;
} _AclService_grantRoleToUser_presult__isset;

class AclService_grantRoleToUser_presult {
 public:


  virtual ~AclService_grantRoleToUser_presult() throw() {}

  AuthStatus* success;

  _AclService_grantRoleToUser_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AclService_grantPrivilegeToRole_args__isset {
  _AclService_grantPrivilegeToRole_args__isset() : role(false), privilege(false), expireTime(false), info(false) {}
  bool role;
  bool privilege;
  bool expireTime;
  bool info;
} _AclService_grantPrivilegeToRole_args__isset;

class AclService_grantPrivilegeToRole_args {
 public:

  AclService_grantPrivilegeToRole_args() : expireTime(0) {
  }

  virtual ~AclService_grantPrivilegeToRole_args() throw() {}

  Role role;
  std::vector<Privilege>  privilege;
  int64_t expireTime;
  AuditInfo info;

  _AclService_grantPrivilegeToRole_args__isset __isset;

  void __set_role(const Role& val) {
    role = val;
  }

  void __set_privilege(const std::vector<Privilege> & val) {
    privilege = val;
  }

  void __set_expireTime(const int64_t val) {
    expireTime = val;
  }

  void __set_info(const AuditInfo& val) {
    info = val;
  }

  bool operator == (const AclService_grantPrivilegeToRole_args & rhs) const
  {
    if (!(role == rhs.role))
      return false;
    if (!(privilege == rhs.privilege))
      return false;
    if (!(expireTime == rhs.expireTime))
      return false;
    if (!(info == rhs.info))
      return false;
    return true;
  }
  bool operator != (const AclService_grantPrivilegeToRole_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AclService_grantPrivilegeToRole_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AclService_grantPrivilegeToRole_pargs {
 public:


  virtual ~AclService_grantPrivilegeToRole_pargs() throw() {}

  const Role* role;
  const std::vector<Privilege> * privilege;
  const int64_t* expireTime;
  const AuditInfo* info;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AclService_grantPrivilegeToRole_result__isset {
  _AclService_grantPrivilegeToRole_result__isset() : success(false) {}
  bool success;
} _AclService_grantPrivilegeToRole_result__isset;

class AclService_grantPrivilegeToRole_result {
 public:

  AclService_grantPrivilegeToRole_result() {
  }

  virtual ~AclService_grantPrivilegeToRole_result() throw() {}

  AuthStatus success;

  _AclService_grantPrivilegeToRole_result__isset __isset;

  void __set_success(const AuthStatus& val) {
    success = val;
  }

  bool operator == (const AclService_grantPrivilegeToRole_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const AclService_grantPrivilegeToRole_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AclService_grantPrivilegeToRole_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AclService_grantPrivilegeToRole_presult__isset {
  _AclService_grantPrivilegeToRole_presult__isset() : success(false) {}
  bool success;
} _AclService_grantPrivilegeToRole_presult__isset;

class AclService_grantPrivilegeToRole_presult {
 public:


  virtual ~AclService_grantPrivilegeToRole_presult() throw() {}

  AuthStatus* success;

  _AclService_grantPrivilegeToRole_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AclService_revokeRole_args__isset {
  _AclService_revokeRole_args__isset() : user(false), role(false), info(false) {}
  bool user;
  bool role;
  bool info;
} _AclService_revokeRole_args__isset;

class AclService_revokeRole_args {
 public:

  AclService_revokeRole_args() {
  }

  virtual ~AclService_revokeRole_args() throw() {}

  User user;
  Role role;
  AuditInfo info;

  _AclService_revokeRole_args__isset __isset;

  void __set_user(const User& val) {
    user = val;
  }

  void __set_role(const Role& val) {
    role = val;
  }

  void __set_info(const AuditInfo& val) {
    info = val;
  }

  bool operator == (const AclService_revokeRole_args & rhs) const
  {
    if (!(user == rhs.user))
      return false;
    if (!(role == rhs.role))
      return false;
    if (!(info == rhs.info))
      return false;
    return true;
  }
  bool operator != (const AclService_revokeRole_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AclService_revokeRole_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AclService_revokeRole_pargs {
 public:


  virtual ~AclService_revokeRole_pargs() throw() {}

  const User* user;
  const Role* role;
  const AuditInfo* info;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AclService_revokeRole_result__isset {
  _AclService_revokeRole_result__isset() : success(false) {}
  bool success;
} _AclService_revokeRole_result__isset;

class AclService_revokeRole_result {
 public:

  AclService_revokeRole_result() {
  }

  virtual ~AclService_revokeRole_result() throw() {}

  AuthStatus success;

  _AclService_revokeRole_result__isset __isset;

  void __set_success(const AuthStatus& val) {
    success = val;
  }

  bool operator == (const AclService_revokeRole_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const AclService_revokeRole_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AclService_revokeRole_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AclService_revokeRole_presult__isset {
  _AclService_revokeRole_presult__isset() : success(false) {}
  bool success;
} _AclService_revokeRole_presult__isset;

class AclService_revokeRole_presult {
 public:


  virtual ~AclService_revokeRole_presult() throw() {}

  AuthStatus* success;

  _AclService_revokeRole_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AclService_revokePrivilege_args__isset {
  _AclService_revokePrivilege_args__isset() : role(false), privilege(false), info(false) {}
  bool role;
  bool privilege;
  bool info;
} _AclService_revokePrivilege_args__isset;

class AclService_revokePrivilege_args {
 public:

  AclService_revokePrivilege_args() {
  }

  virtual ~AclService_revokePrivilege_args() throw() {}

  Role role;
  std::vector<Privilege>  privilege;
  AuditInfo info;

  _AclService_revokePrivilege_args__isset __isset;

  void __set_role(const Role& val) {
    role = val;
  }

  void __set_privilege(const std::vector<Privilege> & val) {
    privilege = val;
  }

  void __set_info(const AuditInfo& val) {
    info = val;
  }

  bool operator == (const AclService_revokePrivilege_args & rhs) const
  {
    if (!(role == rhs.role))
      return false;
    if (!(privilege == rhs.privilege))
      return false;
    if (!(info == rhs.info))
      return false;
    return true;
  }
  bool operator != (const AclService_revokePrivilege_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AclService_revokePrivilege_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AclService_revokePrivilege_pargs {
 public:


  virtual ~AclService_revokePrivilege_pargs() throw() {}

  const Role* role;
  const std::vector<Privilege> * privilege;
  const AuditInfo* info;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AclService_revokePrivilege_result__isset {
  _AclService_revokePrivilege_result__isset() : success(false) {}
  bool success;
} _AclService_revokePrivilege_result__isset;

class AclService_revokePrivilege_result {
 public:

  AclService_revokePrivilege_result() {
  }

  virtual ~AclService_revokePrivilege_result() throw() {}

  AuthStatus success;

  _AclService_revokePrivilege_result__isset __isset;

  void __set_success(const AuthStatus& val) {
    success = val;
  }

  bool operator == (const AclService_revokePrivilege_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const AclService_revokePrivilege_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AclService_revokePrivilege_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AclService_revokePrivilege_presult__isset {
  _AclService_revokePrivilege_presult__isset() : success(false) {}
  bool success;
} _AclService_revokePrivilege_presult__isset;

class AclService_revokePrivilege_presult {
 public:


  virtual ~AclService_revokePrivilege_presult() throw() {}

  AuthStatus* success;

  _AclService_revokePrivilege_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AclService_authenticateUser_args__isset {
  _AclService_authenticateUser_args__isset() : user(false), privilege(false) {}
  bool user;
  bool privilege;
} _AclService_authenticateUser_args__isset;

class AclService_authenticateUser_args {
 public:

  AclService_authenticateUser_args() {
  }

  virtual ~AclService_authenticateUser_args() throw() {}

  User user;
  std::vector<Privilege>  privilege;

  _AclService_authenticateUser_args__isset __isset;

  void __set_user(const User& val) {
    user = val;
  }

  void __set_privilege(const std::vector<Privilege> & val) {
    privilege = val;
  }

  bool operator == (const AclService_authenticateUser_args & rhs) const
  {
    if (!(user == rhs.user))
      return false;
    if (!(privilege == rhs.privilege))
      return false;
    return true;
  }
  bool operator != (const AclService_authenticateUser_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AclService_authenticateUser_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AclService_authenticateUser_pargs {
 public:


  virtual ~AclService_authenticateUser_pargs() throw() {}

  const User* user;
  const std::vector<Privilege> * privilege;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AclService_authenticateUser_result__isset {
  _AclService_authenticateUser_result__isset() : success(false) {}
  bool success;
} _AclService_authenticateUser_result__isset;

class AclService_authenticateUser_result {
 public:

  AclService_authenticateUser_result() {
  }

  virtual ~AclService_authenticateUser_result() throw() {}

  AuthStatus success;

  _AclService_authenticateUser_result__isset __isset;

  void __set_success(const AuthStatus& val) {
    success = val;
  }

  bool operator == (const AclService_authenticateUser_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const AclService_authenticateUser_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AclService_authenticateUser_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AclService_authenticateUser_presult__isset {
  _AclService_authenticateUser_presult__isset() : success(false) {}
  bool success;
} _AclService_authenticateUser_presult__isset;

class AclService_authenticateUser_presult {
 public:


  virtual ~AclService_authenticateUser_presult() throw() {}

  AuthStatus* success;

  _AclService_authenticateUser_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AclService_authenticateRole_args__isset {
  _AclService_authenticateRole_args__isset() : role(false), privilege(false) {}
  bool role;
  bool privilege;
} _AclService_authenticateRole_args__isset;

class AclService_authenticateRole_args {
 public:

  AclService_authenticateRole_args() {
  }

  virtual ~AclService_authenticateRole_args() throw() {}

  Role role;
  std::vector<Privilege>  privilege;

  _AclService_authenticateRole_args__isset __isset;

  void __set_role(const Role& val) {
    role = val;
  }

  void __set_privilege(const std::vector<Privilege> & val) {
    privilege = val;
  }

  bool operator == (const AclService_authenticateRole_args & rhs) const
  {
    if (!(role == rhs.role))
      return false;
    if (!(privilege == rhs.privilege))
      return false;
    return true;
  }
  bool operator != (const AclService_authenticateRole_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AclService_authenticateRole_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AclService_authenticateRole_pargs {
 public:


  virtual ~AclService_authenticateRole_pargs() throw() {}

  const Role* role;
  const std::vector<Privilege> * privilege;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AclService_authenticateRole_result__isset {
  _AclService_authenticateRole_result__isset() : success(false) {}
  bool success;
} _AclService_authenticateRole_result__isset;

class AclService_authenticateRole_result {
 public:

  AclService_authenticateRole_result() {
  }

  virtual ~AclService_authenticateRole_result() throw() {}

  AuthStatus success;

  _AclService_authenticateRole_result__isset __isset;

  void __set_success(const AuthStatus& val) {
    success = val;
  }

  bool operator == (const AclService_authenticateRole_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const AclService_authenticateRole_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AclService_authenticateRole_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AclService_authenticateRole_presult__isset {
  _AclService_authenticateRole_presult__isset() : success(false) {}
  bool success;
} _AclService_authenticateRole_presult__isset;

class AclService_authenticateRole_presult {
 public:


  virtual ~AclService_authenticateRole_presult() throw() {}

  AuthStatus* success;

  _AclService_authenticateRole_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AclService_expireUserPrivilege_args__isset {
  _AclService_expireUserPrivilege_args__isset() : user(false) {}
  bool user;
} _AclService_expireUserPrivilege_args__isset;

class AclService_expireUserPrivilege_args {
 public:

  AclService_expireUserPrivilege_args() {
  }

  virtual ~AclService_expireUserPrivilege_args() throw() {}

  User user;

  _AclService_expireUserPrivilege_args__isset __isset;

  void __set_user(const User& val) {
    user = val;
  }

  bool operator == (const AclService_expireUserPrivilege_args & rhs) const
  {
    if (!(user == rhs.user))
      return false;
    return true;
  }
  bool operator != (const AclService_expireUserPrivilege_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AclService_expireUserPrivilege_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AclService_expireUserPrivilege_pargs {
 public:


  virtual ~AclService_expireUserPrivilege_pargs() throw() {}

  const User* user;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AclService_expireUserPrivilege_result__isset {
  _AclService_expireUserPrivilege_result__isset() : success(false) {}
  bool success;
} _AclService_expireUserPrivilege_result__isset;

class AclService_expireUserPrivilege_result {
 public:

  AclService_expireUserPrivilege_result() {
  }

  virtual ~AclService_expireUserPrivilege_result() throw() {}

  AuthStatus success;

  _AclService_expireUserPrivilege_result__isset __isset;

  void __set_success(const AuthStatus& val) {
    success = val;
  }

  bool operator == (const AclService_expireUserPrivilege_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const AclService_expireUserPrivilege_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AclService_expireUserPrivilege_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AclService_expireUserPrivilege_presult__isset {
  _AclService_expireUserPrivilege_presult__isset() : success(false) {}
  bool success;
} _AclService_expireUserPrivilege_presult__isset;

class AclService_expireUserPrivilege_presult {
 public:


  virtual ~AclService_expireUserPrivilege_presult() throw() {}

  AuthStatus* success;

  _AclService_expireUserPrivilege_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AclService_expireRolePrivilege_args__isset {
  _AclService_expireRolePrivilege_args__isset() : role(false) {}
  bool role;
} _AclService_expireRolePrivilege_args__isset;

class AclService_expireRolePrivilege_args {
 public:

  AclService_expireRolePrivilege_args() {
  }

  virtual ~AclService_expireRolePrivilege_args() throw() {}

  Role role;

  _AclService_expireRolePrivilege_args__isset __isset;

  void __set_role(const Role& val) {
    role = val;
  }

  bool operator == (const AclService_expireRolePrivilege_args & rhs) const
  {
    if (!(role == rhs.role))
      return false;
    return true;
  }
  bool operator != (const AclService_expireRolePrivilege_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AclService_expireRolePrivilege_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AclService_expireRolePrivilege_pargs {
 public:


  virtual ~AclService_expireRolePrivilege_pargs() throw() {}

  const Role* role;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AclService_expireRolePrivilege_result__isset {
  _AclService_expireRolePrivilege_result__isset() : success(false) {}
  bool success;
} _AclService_expireRolePrivilege_result__isset;

class AclService_expireRolePrivilege_result {
 public:

  AclService_expireRolePrivilege_result() {
  }

  virtual ~AclService_expireRolePrivilege_result() throw() {}

  AuthStatus success;

  _AclService_expireRolePrivilege_result__isset __isset;

  void __set_success(const AuthStatus& val) {
    success = val;
  }

  bool operator == (const AclService_expireRolePrivilege_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const AclService_expireRolePrivilege_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AclService_expireRolePrivilege_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AclService_expireRolePrivilege_presult__isset {
  _AclService_expireRolePrivilege_presult__isset() : success(false) {}
  bool success;
} _AclService_expireRolePrivilege_presult__isset;

class AclService_expireRolePrivilege_presult {
 public:


  virtual ~AclService_expireRolePrivilege_presult() throw() {}

  AuthStatus* success;

  _AclService_expireRolePrivilege_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AclService_getRoleInfo_args__isset {
  _AclService_getRoleInfo_args__isset() : role(false) {}
  bool role;
} _AclService_getRoleInfo_args__isset;

class AclService_getRoleInfo_args {
 public:

  AclService_getRoleInfo_args() {
  }

  virtual ~AclService_getRoleInfo_args() throw() {}

  Role role;

  _AclService_getRoleInfo_args__isset __isset;

  void __set_role(const Role& val) {
    role = val;
  }

  bool operator == (const AclService_getRoleInfo_args & rhs) const
  {
    if (!(role == rhs.role))
      return false;
    return true;
  }
  bool operator != (const AclService_getRoleInfo_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AclService_getRoleInfo_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AclService_getRoleInfo_pargs {
 public:


  virtual ~AclService_getRoleInfo_pargs() throw() {}

  const Role* role;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AclService_getRoleInfo_result__isset {
  _AclService_getRoleInfo_result__isset() : success(false) {}
  bool success;
} _AclService_getRoleInfo_result__isset;

class AclService_getRoleInfo_result {
 public:

  AclService_getRoleInfo_result() {
  }

  virtual ~AclService_getRoleInfo_result() throw() {}

  RoleInfo success;

  _AclService_getRoleInfo_result__isset __isset;

  void __set_success(const RoleInfo& val) {
    success = val;
  }

  bool operator == (const AclService_getRoleInfo_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const AclService_getRoleInfo_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AclService_getRoleInfo_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AclService_getRoleInfo_presult__isset {
  _AclService_getRoleInfo_presult__isset() : success(false) {}
  bool success;
} _AclService_getRoleInfo_presult__isset;

class AclService_getRoleInfo_presult {
 public:


  virtual ~AclService_getRoleInfo_presult() throw() {}

  RoleInfo* success;

  _AclService_getRoleInfo_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AclService_getUserInfo_args__isset {
  _AclService_getUserInfo_args__isset() : user(false) {}
  bool user;
} _AclService_getUserInfo_args__isset;

class AclService_getUserInfo_args {
 public:

  AclService_getUserInfo_args() {
  }

  virtual ~AclService_getUserInfo_args() throw() {}

  User user;

  _AclService_getUserInfo_args__isset __isset;

  void __set_user(const User& val) {
    user = val;
  }

  bool operator == (const AclService_getUserInfo_args & rhs) const
  {
    if (!(user == rhs.user))
      return false;
    return true;
  }
  bool operator != (const AclService_getUserInfo_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AclService_getUserInfo_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AclService_getUserInfo_pargs {
 public:


  virtual ~AclService_getUserInfo_pargs() throw() {}

  const User* user;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AclService_getUserInfo_result__isset {
  _AclService_getUserInfo_result__isset() : success(false) {}
  bool success;
} _AclService_getUserInfo_result__isset;

class AclService_getUserInfo_result {
 public:

  AclService_getUserInfo_result() {
  }

  virtual ~AclService_getUserInfo_result() throw() {}

  UserInfo success;

  _AclService_getUserInfo_result__isset __isset;

  void __set_success(const UserInfo& val) {
    success = val;
  }

  bool operator == (const AclService_getUserInfo_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const AclService_getUserInfo_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AclService_getUserInfo_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AclService_getUserInfo_presult__isset {
  _AclService_getUserInfo_presult__isset() : success(false) {}
  bool success;
} _AclService_getUserInfo_presult__isset;

class AclService_getUserInfo_presult {
 public:


  virtual ~AclService_getUserInfo_presult() throw() {}

  UserInfo* success;

  _AclService_getUserInfo_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AclService_getRolesByUser_args__isset {
  _AclService_getRolesByUser_args__isset() : user(false) {}
  bool user;
} _AclService_getRolesByUser_args__isset;

class AclService_getRolesByUser_args {
 public:

  AclService_getRolesByUser_args() {
  }

  virtual ~AclService_getRolesByUser_args() throw() {}

  User user;

  _AclService_getRolesByUser_args__isset __isset;

  void __set_user(const User& val) {
    user = val;
  }

  bool operator == (const AclService_getRolesByUser_args & rhs) const
  {
    if (!(user == rhs.user))
      return false;
    return true;
  }
  bool operator != (const AclService_getRolesByUser_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AclService_getRolesByUser_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AclService_getRolesByUser_pargs {
 public:


  virtual ~AclService_getRolesByUser_pargs() throw() {}

  const User* user;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AclService_getRolesByUser_result__isset {
  _AclService_getRolesByUser_result__isset() : success(false) {}
  bool success;
} _AclService_getRolesByUser_result__isset;

class AclService_getRolesByUser_result {
 public:

  AclService_getRolesByUser_result() {
  }

  virtual ~AclService_getRolesByUser_result() throw() {}

  std::vector<Role>  success;

  _AclService_getRolesByUser_result__isset __isset;

  void __set_success(const std::vector<Role> & val) {
    success = val;
  }

  bool operator == (const AclService_getRolesByUser_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const AclService_getRolesByUser_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AclService_getRolesByUser_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AclService_getRolesByUser_presult__isset {
  _AclService_getRolesByUser_presult__isset() : success(false) {}
  bool success;
} _AclService_getRolesByUser_presult__isset;

class AclService_getRolesByUser_presult {
 public:


  virtual ~AclService_getRolesByUser_presult() throw() {}

  std::vector<Role> * success;

  _AclService_getRolesByUser_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AclService_getPrivilegesByRole_args__isset {
  _AclService_getPrivilegesByRole_args__isset() : role(false) {}
  bool role;
} _AclService_getPrivilegesByRole_args__isset;

class AclService_getPrivilegesByRole_args {
 public:

  AclService_getPrivilegesByRole_args() {
  }

  virtual ~AclService_getPrivilegesByRole_args() throw() {}

  Role role;

  _AclService_getPrivilegesByRole_args__isset __isset;

  void __set_role(const Role& val) {
    role = val;
  }

  bool operator == (const AclService_getPrivilegesByRole_args & rhs) const
  {
    if (!(role == rhs.role))
      return false;
    return true;
  }
  bool operator != (const AclService_getPrivilegesByRole_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AclService_getPrivilegesByRole_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AclService_getPrivilegesByRole_pargs {
 public:


  virtual ~AclService_getPrivilegesByRole_pargs() throw() {}

  const Role* role;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AclService_getPrivilegesByRole_result__isset {
  _AclService_getPrivilegesByRole_result__isset() : success(false) {}
  bool success;
} _AclService_getPrivilegesByRole_result__isset;

class AclService_getPrivilegesByRole_result {
 public:

  AclService_getPrivilegesByRole_result() {
  }

  virtual ~AclService_getPrivilegesByRole_result() throw() {}

  std::vector<Privilege>  success;

  _AclService_getPrivilegesByRole_result__isset __isset;

  void __set_success(const std::vector<Privilege> & val) {
    success = val;
  }

  bool operator == (const AclService_getPrivilegesByRole_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const AclService_getPrivilegesByRole_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AclService_getPrivilegesByRole_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AclService_getPrivilegesByRole_presult__isset {
  _AclService_getPrivilegesByRole_presult__isset() : success(false) {}
  bool success;
} _AclService_getPrivilegesByRole_presult__isset;

class AclService_getPrivilegesByRole_presult {
 public:


  virtual ~AclService_getPrivilegesByRole_presult() throw() {}

  std::vector<Privilege> * success;

  _AclService_getPrivilegesByRole_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AclService_getUsersHasRole_args__isset {
  _AclService_getUsersHasRole_args__isset() : role(false) {}
  bool role;
} _AclService_getUsersHasRole_args__isset;

class AclService_getUsersHasRole_args {
 public:

  AclService_getUsersHasRole_args() {
  }

  virtual ~AclService_getUsersHasRole_args() throw() {}

  Role role;

  _AclService_getUsersHasRole_args__isset __isset;

  void __set_role(const Role& val) {
    role = val;
  }

  bool operator == (const AclService_getUsersHasRole_args & rhs) const
  {
    if (!(role == rhs.role))
      return false;
    return true;
  }
  bool operator != (const AclService_getUsersHasRole_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AclService_getUsersHasRole_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AclService_getUsersHasRole_pargs {
 public:


  virtual ~AclService_getUsersHasRole_pargs() throw() {}

  const Role* role;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AclService_getUsersHasRole_result__isset {
  _AclService_getUsersHasRole_result__isset() : success(false) {}
  bool success;
} _AclService_getUsersHasRole_result__isset;

class AclService_getUsersHasRole_result {
 public:

  AclService_getUsersHasRole_result() {
  }

  virtual ~AclService_getUsersHasRole_result() throw() {}

  std::vector<UserInfo>  success;

  _AclService_getUsersHasRole_result__isset __isset;

  void __set_success(const std::vector<UserInfo> & val) {
    success = val;
  }

  bool operator == (const AclService_getUsersHasRole_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const AclService_getUsersHasRole_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AclService_getUsersHasRole_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AclService_getUsersHasRole_presult__isset {
  _AclService_getUsersHasRole_presult__isset() : success(false) {}
  bool success;
} _AclService_getUsersHasRole_presult__isset;

class AclService_getUsersHasRole_presult {
 public:


  virtual ~AclService_getUsersHasRole_presult() throw() {}

  std::vector<UserInfo> * success;

  _AclService_getUsersHasRole_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AclService_getRolesHasPrivilege_args__isset {
  _AclService_getRolesHasPrivilege_args__isset() : privilege(false) {}
  bool privilege;
} _AclService_getRolesHasPrivilege_args__isset;

class AclService_getRolesHasPrivilege_args {
 public:

  AclService_getRolesHasPrivilege_args() {
  }

  virtual ~AclService_getRolesHasPrivilege_args() throw() {}

  Privilege privilege;

  _AclService_getRolesHasPrivilege_args__isset __isset;

  void __set_privilege(const Privilege& val) {
    privilege = val;
  }

  bool operator == (const AclService_getRolesHasPrivilege_args & rhs) const
  {
    if (!(privilege == rhs.privilege))
      return false;
    return true;
  }
  bool operator != (const AclService_getRolesHasPrivilege_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AclService_getRolesHasPrivilege_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AclService_getRolesHasPrivilege_pargs {
 public:


  virtual ~AclService_getRolesHasPrivilege_pargs() throw() {}

  const Privilege* privilege;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AclService_getRolesHasPrivilege_result__isset {
  _AclService_getRolesHasPrivilege_result__isset() : success(false) {}
  bool success;
} _AclService_getRolesHasPrivilege_result__isset;

class AclService_getRolesHasPrivilege_result {
 public:

  AclService_getRolesHasPrivilege_result() {
  }

  virtual ~AclService_getRolesHasPrivilege_result() throw() {}

  std::vector<RoleInfo>  success;

  _AclService_getRolesHasPrivilege_result__isset __isset;

  void __set_success(const std::vector<RoleInfo> & val) {
    success = val;
  }

  bool operator == (const AclService_getRolesHasPrivilege_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const AclService_getRolesHasPrivilege_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AclService_getRolesHasPrivilege_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AclService_getRolesHasPrivilege_presult__isset {
  _AclService_getRolesHasPrivilege_presult__isset() : success(false) {}
  bool success;
} _AclService_getRolesHasPrivilege_presult__isset;

class AclService_getRolesHasPrivilege_presult {
 public:


  virtual ~AclService_getRolesHasPrivilege_presult() throw() {}

  std::vector<RoleInfo> * success;

  _AclService_getRolesHasPrivilege_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AclService_addAuditInfo_args__isset {
  _AclService_addAuditInfo_args__isset() : info(false) {}
  bool info;
} _AclService_addAuditInfo_args__isset;

class AclService_addAuditInfo_args {
 public:

  AclService_addAuditInfo_args() {
  }

  virtual ~AclService_addAuditInfo_args() throw() {}

  AuditInfo info;

  _AclService_addAuditInfo_args__isset __isset;

  void __set_info(const AuditInfo& val) {
    info = val;
  }

  bool operator == (const AclService_addAuditInfo_args & rhs) const
  {
    if (!(info == rhs.info))
      return false;
    return true;
  }
  bool operator != (const AclService_addAuditInfo_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AclService_addAuditInfo_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AclService_addAuditInfo_pargs {
 public:


  virtual ~AclService_addAuditInfo_pargs() throw() {}

  const AuditInfo* info;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AclService_addAuditInfo_result {
 public:

  AclService_addAuditInfo_result() {
  }

  virtual ~AclService_addAuditInfo_result() throw() {}


  bool operator == (const AclService_addAuditInfo_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const AclService_addAuditInfo_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AclService_addAuditInfo_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AclService_addAuditInfo_presult {
 public:


  virtual ~AclService_addAuditInfo_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AclService_getAuditInfo_args__isset {
  _AclService_getAuditInfo_args__isset() : query(false) {}
  bool query;
} _AclService_getAuditInfo_args__isset;

class AclService_getAuditInfo_args {
 public:

  AclService_getAuditInfo_args() {
  }

  virtual ~AclService_getAuditInfo_args() throw() {}

  AuditCriteria query;

  _AclService_getAuditInfo_args__isset __isset;

  void __set_query(const AuditCriteria& val) {
    query = val;
  }

  bool operator == (const AclService_getAuditInfo_args & rhs) const
  {
    if (!(query == rhs.query))
      return false;
    return true;
  }
  bool operator != (const AclService_getAuditInfo_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AclService_getAuditInfo_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AclService_getAuditInfo_pargs {
 public:


  virtual ~AclService_getAuditInfo_pargs() throw() {}

  const AuditCriteria* query;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AclService_getAuditInfo_result__isset {
  _AclService_getAuditInfo_result__isset() : success(false) {}
  bool success;
} _AclService_getAuditInfo_result__isset;

class AclService_getAuditInfo_result {
 public:

  AclService_getAuditInfo_result() {
  }

  virtual ~AclService_getAuditInfo_result() throw() {}

  std::vector<AuditInfo>  success;

  _AclService_getAuditInfo_result__isset __isset;

  void __set_success(const std::vector<AuditInfo> & val) {
    success = val;
  }

  bool operator == (const AclService_getAuditInfo_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const AclService_getAuditInfo_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AclService_getAuditInfo_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AclService_getAuditInfo_presult__isset {
  _AclService_getAuditInfo_presult__isset() : success(false) {}
  bool success;
} _AclService_getAuditInfo_presult__isset;

class AclService_getAuditInfo_presult {
 public:


  virtual ~AclService_getAuditInfo_presult() throw() {}

  std::vector<AuditInfo> * success;

  _AclService_getAuditInfo_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class AclServiceClient : virtual public AclServiceIf {
 public:
  AclServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  AclServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void validateUser(AuthStatus& _return, const User& user, const std::string& password);
  void send_validateUser(const User& user, const std::string& password);
  void recv_validateUser(AuthStatus& _return);
  void open(const User& user, const std::string& password);
  void send_open(const User& user, const std::string& password);
  void recv_open();
  void close();
  void send_close();
  void recv_close();
  void addUser(AuthStatus& _return, const UserInfo& userinfo, const AuditInfo& info);
  void send_addUser(const UserInfo& userinfo, const AuditInfo& info);
  void recv_addUser(AuthStatus& _return);
  void removeUser(AuthStatus& _return, const User& user, const AuditInfo& info);
  void send_removeUser(const User& user, const AuditInfo& info);
  void recv_removeUser(AuthStatus& _return);
  void addRole(AuthStatus& _return, const RoleInfo& roleInfo, const AuditInfo& info);
  void send_addRole(const RoleInfo& roleInfo, const AuditInfo& info);
  void recv_addRole(AuthStatus& _return);
  void removeRole(AuthStatus& _return, const Role& role, const AuditInfo& info);
  void send_removeRole(const Role& role, const AuditInfo& info);
  void recv_removeRole(AuthStatus& _return);
  void grantRoleToUser(AuthStatus& _return, const User& user, const Role& role, const int64_t expireTime, const AuditInfo& info);
  void send_grantRoleToUser(const User& user, const Role& role, const int64_t expireTime, const AuditInfo& info);
  void recv_grantRoleToUser(AuthStatus& _return);
  void grantPrivilegeToRole(AuthStatus& _return, const Role& role, const std::vector<Privilege> & privilege, const int64_t expireTime, const AuditInfo& info);
  void send_grantPrivilegeToRole(const Role& role, const std::vector<Privilege> & privilege, const int64_t expireTime, const AuditInfo& info);
  void recv_grantPrivilegeToRole(AuthStatus& _return);
  void revokeRole(AuthStatus& _return, const User& user, const Role& role, const AuditInfo& info);
  void send_revokeRole(const User& user, const Role& role, const AuditInfo& info);
  void recv_revokeRole(AuthStatus& _return);
  void revokePrivilege(AuthStatus& _return, const Role& role, const std::vector<Privilege> & privilege, const AuditInfo& info);
  void send_revokePrivilege(const Role& role, const std::vector<Privilege> & privilege, const AuditInfo& info);
  void recv_revokePrivilege(AuthStatus& _return);
  void authenticateUser(AuthStatus& _return, const User& user, const std::vector<Privilege> & privilege);
  void send_authenticateUser(const User& user, const std::vector<Privilege> & privilege);
  void recv_authenticateUser(AuthStatus& _return);
  void authenticateRole(AuthStatus& _return, const Role& role, const std::vector<Privilege> & privilege);
  void send_authenticateRole(const Role& role, const std::vector<Privilege> & privilege);
  void recv_authenticateRole(AuthStatus& _return);
  void expireUserPrivilege(AuthStatus& _return, const User& user);
  void send_expireUserPrivilege(const User& user);
  void recv_expireUserPrivilege(AuthStatus& _return);
  void expireRolePrivilege(AuthStatus& _return, const Role& role);
  void send_expireRolePrivilege(const Role& role);
  void recv_expireRolePrivilege(AuthStatus& _return);
  void getRoleInfo(RoleInfo& _return, const Role& role);
  void send_getRoleInfo(const Role& role);
  void recv_getRoleInfo(RoleInfo& _return);
  void getUserInfo(UserInfo& _return, const User& user);
  void send_getUserInfo(const User& user);
  void recv_getUserInfo(UserInfo& _return);
  void getRolesByUser(std::vector<Role> & _return, const User& user);
  void send_getRolesByUser(const User& user);
  void recv_getRolesByUser(std::vector<Role> & _return);
  void getPrivilegesByRole(std::vector<Privilege> & _return, const Role& role);
  void send_getPrivilegesByRole(const Role& role);
  void recv_getPrivilegesByRole(std::vector<Privilege> & _return);
  void getUsersHasRole(std::vector<UserInfo> & _return, const Role& role);
  void send_getUsersHasRole(const Role& role);
  void recv_getUsersHasRole(std::vector<UserInfo> & _return);
  void getRolesHasPrivilege(std::vector<RoleInfo> & _return, const Privilege& privilege);
  void send_getRolesHasPrivilege(const Privilege& privilege);
  void recv_getRolesHasPrivilege(std::vector<RoleInfo> & _return);
  void addAuditInfo(const AuditInfo& info);
  void send_addAuditInfo(const AuditInfo& info);
  void recv_addAuditInfo();
  void getAuditInfo(std::vector<AuditInfo> & _return, const AuditCriteria& query);
  void send_getAuditInfo(const AuditCriteria& query);
  void recv_getAuditInfo(std::vector<AuditInfo> & _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class AclServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<AclServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (AclServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_validateUser(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_open(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_close(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_addUser(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_removeUser(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_addRole(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_removeRole(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_grantRoleToUser(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_grantPrivilegeToRole(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_revokeRole(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_revokePrivilege(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_authenticateUser(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_authenticateRole(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_expireUserPrivilege(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_expireRolePrivilege(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getRoleInfo(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getUserInfo(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getRolesByUser(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getPrivilegesByRole(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getUsersHasRole(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getRolesHasPrivilege(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_addAuditInfo(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getAuditInfo(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  AclServiceProcessor(boost::shared_ptr<AclServiceIf> iface) :
    iface_(iface) {
    processMap_["validateUser"] = &AclServiceProcessor::process_validateUser;
    processMap_["open"] = &AclServiceProcessor::process_open;
    processMap_["close"] = &AclServiceProcessor::process_close;
    processMap_["addUser"] = &AclServiceProcessor::process_addUser;
    processMap_["removeUser"] = &AclServiceProcessor::process_removeUser;
    processMap_["addRole"] = &AclServiceProcessor::process_addRole;
    processMap_["removeRole"] = &AclServiceProcessor::process_removeRole;
    processMap_["grantRoleToUser"] = &AclServiceProcessor::process_grantRoleToUser;
    processMap_["grantPrivilegeToRole"] = &AclServiceProcessor::process_grantPrivilegeToRole;
    processMap_["revokeRole"] = &AclServiceProcessor::process_revokeRole;
    processMap_["revokePrivilege"] = &AclServiceProcessor::process_revokePrivilege;
    processMap_["authenticateUser"] = &AclServiceProcessor::process_authenticateUser;
    processMap_["authenticateRole"] = &AclServiceProcessor::process_authenticateRole;
    processMap_["expireUserPrivilege"] = &AclServiceProcessor::process_expireUserPrivilege;
    processMap_["expireRolePrivilege"] = &AclServiceProcessor::process_expireRolePrivilege;
    processMap_["getRoleInfo"] = &AclServiceProcessor::process_getRoleInfo;
    processMap_["getUserInfo"] = &AclServiceProcessor::process_getUserInfo;
    processMap_["getRolesByUser"] = &AclServiceProcessor::process_getRolesByUser;
    processMap_["getPrivilegesByRole"] = &AclServiceProcessor::process_getPrivilegesByRole;
    processMap_["getUsersHasRole"] = &AclServiceProcessor::process_getUsersHasRole;
    processMap_["getRolesHasPrivilege"] = &AclServiceProcessor::process_getRolesHasPrivilege;
    processMap_["addAuditInfo"] = &AclServiceProcessor::process_addAuditInfo;
    processMap_["getAuditInfo"] = &AclServiceProcessor::process_getAuditInfo;
  }

  virtual ~AclServiceProcessor() {}
};

class AclServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  AclServiceProcessorFactory(const ::boost::shared_ptr< AclServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< AclServiceIfFactory > handlerFactory_;
};

class AclServiceMultiface : virtual public AclServiceIf {
 public:
  AclServiceMultiface(std::vector<boost::shared_ptr<AclServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~AclServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<AclServiceIf> > ifaces_;
  AclServiceMultiface() {}
  void add(boost::shared_ptr<AclServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void validateUser(AuthStatus& _return, const User& user, const std::string& password) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->validateUser(_return, user, password);
    }
    ifaces_[i]->validateUser(_return, user, password);
    return;
  }

  void open(const User& user, const std::string& password) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->open(user, password);
    }
    ifaces_[i]->open(user, password);
  }

  void close() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->close();
    }
    ifaces_[i]->close();
  }

  void addUser(AuthStatus& _return, const UserInfo& userinfo, const AuditInfo& info) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->addUser(_return, userinfo, info);
    }
    ifaces_[i]->addUser(_return, userinfo, info);
    return;
  }

  void removeUser(AuthStatus& _return, const User& user, const AuditInfo& info) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->removeUser(_return, user, info);
    }
    ifaces_[i]->removeUser(_return, user, info);
    return;
  }

  void addRole(AuthStatus& _return, const RoleInfo& roleInfo, const AuditInfo& info) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->addRole(_return, roleInfo, info);
    }
    ifaces_[i]->addRole(_return, roleInfo, info);
    return;
  }

  void removeRole(AuthStatus& _return, const Role& role, const AuditInfo& info) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->removeRole(_return, role, info);
    }
    ifaces_[i]->removeRole(_return, role, info);
    return;
  }

  void grantRoleToUser(AuthStatus& _return, const User& user, const Role& role, const int64_t expireTime, const AuditInfo& info) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->grantRoleToUser(_return, user, role, expireTime, info);
    }
    ifaces_[i]->grantRoleToUser(_return, user, role, expireTime, info);
    return;
  }

  void grantPrivilegeToRole(AuthStatus& _return, const Role& role, const std::vector<Privilege> & privilege, const int64_t expireTime, const AuditInfo& info) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->grantPrivilegeToRole(_return, role, privilege, expireTime, info);
    }
    ifaces_[i]->grantPrivilegeToRole(_return, role, privilege, expireTime, info);
    return;
  }

  void revokeRole(AuthStatus& _return, const User& user, const Role& role, const AuditInfo& info) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->revokeRole(_return, user, role, info);
    }
    ifaces_[i]->revokeRole(_return, user, role, info);
    return;
  }

  void revokePrivilege(AuthStatus& _return, const Role& role, const std::vector<Privilege> & privilege, const AuditInfo& info) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->revokePrivilege(_return, role, privilege, info);
    }
    ifaces_[i]->revokePrivilege(_return, role, privilege, info);
    return;
  }

  void authenticateUser(AuthStatus& _return, const User& user, const std::vector<Privilege> & privilege) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->authenticateUser(_return, user, privilege);
    }
    ifaces_[i]->authenticateUser(_return, user, privilege);
    return;
  }

  void authenticateRole(AuthStatus& _return, const Role& role, const std::vector<Privilege> & privilege) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->authenticateRole(_return, role, privilege);
    }
    ifaces_[i]->authenticateRole(_return, role, privilege);
    return;
  }

  void expireUserPrivilege(AuthStatus& _return, const User& user) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->expireUserPrivilege(_return, user);
    }
    ifaces_[i]->expireUserPrivilege(_return, user);
    return;
  }

  void expireRolePrivilege(AuthStatus& _return, const Role& role) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->expireRolePrivilege(_return, role);
    }
    ifaces_[i]->expireRolePrivilege(_return, role);
    return;
  }

  void getRoleInfo(RoleInfo& _return, const Role& role) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getRoleInfo(_return, role);
    }
    ifaces_[i]->getRoleInfo(_return, role);
    return;
  }

  void getUserInfo(UserInfo& _return, const User& user) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getUserInfo(_return, user);
    }
    ifaces_[i]->getUserInfo(_return, user);
    return;
  }

  void getRolesByUser(std::vector<Role> & _return, const User& user) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getRolesByUser(_return, user);
    }
    ifaces_[i]->getRolesByUser(_return, user);
    return;
  }

  void getPrivilegesByRole(std::vector<Privilege> & _return, const Role& role) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getPrivilegesByRole(_return, role);
    }
    ifaces_[i]->getPrivilegesByRole(_return, role);
    return;
  }

  void getUsersHasRole(std::vector<UserInfo> & _return, const Role& role) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getUsersHasRole(_return, role);
    }
    ifaces_[i]->getUsersHasRole(_return, role);
    return;
  }

  void getRolesHasPrivilege(std::vector<RoleInfo> & _return, const Privilege& privilege) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getRolesHasPrivilege(_return, privilege);
    }
    ifaces_[i]->getRolesHasPrivilege(_return, privilege);
    return;
  }

  void addAuditInfo(const AuditInfo& info) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->addAuditInfo(info);
    }
    ifaces_[i]->addAuditInfo(info);
  }

  void getAuditInfo(std::vector<AuditInfo> & _return, const AuditCriteria& query) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getAuditInfo(_return, query);
    }
    ifaces_[i]->getAuditInfo(_return, query);
    return;
  }

};



#endif
